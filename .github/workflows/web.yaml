name: website
on: 
  pull_request:
    types: [opened,edited,synchronize,reopened]
  push: 
jobs:
  build: 
    runs-on: ubuntu-latest
    steps:
      - name: sparse checkout
        shell: bash
        run: |
          # https://github.com/actions/checkout/issues/172#issuecomment-597265972
          # https://qiita.com/y-icchi/items/1bddd58872f9624ba2eb

          REPO="https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          BRANCH="${GITHUB_REF/#refs\/heads\//}"

          # Following code is based on logs of actions/checkout@v, with sparseCheckout stuff inserted in the middle
          echo "Syncing repository: $GITHUB_REPOSITORY"
          echo "Working directory is '$(pwd)' GITHUB_WORKSPACE=$GITHUB_WORKSPACE BRANCH=$BRANCH"
          git version
          git init $GITHUB_WORKSPACE
          git remote add origin https://github.com/$GITHUB_REPOSITORY
          git config --local gc.auto 0
          # Now interesting part
          git config core.sparseCheckout true
          git config filter.lfs.smudge "git-lfs smudge --skip %f"
          # Add here contents of sparse-checkout line by line
          echo /packages/domains/command-data > .git/info/sparse-checkout
          echo /packages/presentation/command-data-common >> .git/info/sparse-checkout
          echo /packages/presentation/web >> .git/info/sparse-checkout
          echo /package.json >> .git/info/sparse-checkout
          echo /yarn.lock >> .git/info/sparse-checkout
          echo /lerna.json >> .git/info/sparse-checkout
          echo /tsconfig.json >> .git/info/sparse-checkout
          git pull origin master 
          git lfs pull -I packages/presentation/web/public/main-icon.png,packages/presentation/web/public/sub1-icon.png
          pwd;find . | sort | sed '1d;s/^\.//;s/\/\([^/]*\)$/|--\1/;s/\/[^/|]*/|  /g'
      - name: setup nodejs
        uses: actions/setup-node@v1
        with: 
          node-version: '14'
      - name: install lerna
        run: |
          yarn global add lerna
          echo "::add-path::$(yarn global bin)"
      - name: build static website
        run: |
          lerna bootstrap
          lerna run build
      - name: prepare upload
        run: |
          mv packages/presentation/web/out static-website
      - name: upload static website
        uses: actions/upload-artifact@v2
        with:
          name: static website
          path: static-website
  deploy-stg:
    runs-on: ubuntu-latest
    needs: [build]
    if: ( github.event_name == 'pull_request' && github.base_ref == 'production-web' ) || ( github.event_name == 'push' && github.ref != 'production-web' )
    env:
      WEB_DEPLOY_TOKEN: ${{ secrets.WEB_DEPLOY_TOKEN }}
    steps:
      - name: download static website
        uses: actions/download-artifact@v2
        with:
          name: static website
      - name: deploy-stg
        uses: amondnet/vercel-action@v19
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }} # Required
          github-token: ${{ secrets.GITHUB_TOKEN }} #Optional 
          vercel-org-id: ${{ secrets.ORG_ID}}  #Required
          vercel-project-id: ${{ secrets.PROJECT_ID}} #Re
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [build]
    if:  ( github.event_name == 'push' && github.ref == 'production-web' )
    steps:
      - name: download static website
        uses: actions/download-artifact@v2
        with:
          name: static website
      - name: deploy-production
        uses: amondnet/vercel-action@v19
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }} # Required
          github-token: ${{ secrets.GITHUB_TOKEN }} #Optional 
          vercel-args: '--prod' #Optional
          vercel-org-id: ${{ secrets.ORG_ID}}  #Required
          vercel-project-id: ${{ secrets.PROJECT_ID}} #Required 
